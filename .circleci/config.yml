# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# # Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# # See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
  python: circleci/python@1.5.0
  node: circleci/node@4.1
  # The heroku orb contains a set of prepackaged CircleCI configuration you can utilize to deploy applications to heroku
  heroku: circleci/heroku@1.2



# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  sample: 
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build-and-test-python
      - node/test
        requires:
          - build-and-test-python
      - heroku/deploy-via-git: # we push to heroku
          force: true # this parameter instructs the push to use a force flag when pushing to the heroku remote, see: https://devcenter.heroku.com/articles/git
          requires:
            - node/test # only run deploy-via-git job if the build job has completed
          filters:
            branches:
              only: master 

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build-and-test-python: # Python file testing
    docker:
      - image: python:3.6.15
    steps:
      - checkout
      - run: pip install -r requirements.txt 
      - run: ls
      - run: FILE="new.txt"
      - run: python3 feelings.py > new.txt
      - run: if grep -q "YEAH" new.txt ; then echo 'The all purrfect.' ; else exit 1 ;  fi
    # filters:
    #   branches:
    #     only: master
